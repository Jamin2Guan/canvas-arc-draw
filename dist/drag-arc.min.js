var dragArc = (function () {
  'use strict';

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var classCallCheck = _classCallCheck;

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  var createClass = _createClass;

  /*
   * @Author       : pangyongsheng
   * @Date         : 2020-06-22 16:13:50
   * @LastEditTime : 2020-06-24 17:49:59
   * @LastEditors  : Please set LastEditors
   * @Description  : In User Settings Edit
   * @FilePath     : \drag-arc\src\dragArc.js
   */
  var DragAcr = /*#__PURE__*/function () {
    function DragAcr(param) {
      classCallCheck(this, DragAcr);

      this.initParam(param);
      this.draw(10);
    }

    createClass(DragAcr, [{
      key: "initParam",
      value: function initParam(param) {
        var el = param.el,
            _param$startDeg = param.startDeg,
            startDeg = _param$startDeg === void 0 ? 0 : _param$startDeg,
            _param$endDeg = param.endDeg,
            endDeg = _param$endDeg === void 0 ? 1 : _param$endDeg,
            _param$innerColor = param.innerColor,
            innerColor = _param$innerColor === void 0 ? "#c0c0c0" : _param$innerColor,
            _param$outColor = param.outColor,
            outColor = _param$outColor === void 0 ? "#0078b4" : _param$outColor,
            _param$innerLineWidth = param.innerLineWidth,
            innerLineWidth = _param$innerLineWidth === void 0 ? 1 : _param$innerLineWidth,
            _param$outLineWidth = param.outLineWidth,
            outLineWidth = _param$outLineWidth === void 0 ? 20 : _param$outLineWidth,
            _param$counterclockwi = param.counterclockwise,
            counterclockwise = _param$counterclockwi === void 0 ? true : _param$counterclockwi,
            _param$rotate = param.rotate,
            rotate = _param$rotate === void 0 ? 0 : _param$rotate,
            _param$slider = param.slider,
            slider = _param$slider === void 0 ? 10 : _param$slider,
            _param$color = param.color,
            color = _param$color === void 0 ? "" : _param$color,
            _param$sliderColor = param.sliderColor,
            sliderColor = _param$sliderColor === void 0 ? "#fff" : _param$sliderColor,
            _param$sliderBorderCo = param.sliderBorderColor,
            sliderBorderColor = _param$sliderBorderCo === void 0 ? "#f15a4a" : _param$sliderBorderCo;
        this.el = el;
        this.width = el.offsetWidth;
        this.height = el.offsetHeight;
        this.center = this.width / 2;
        this.radius = this.width / 3; //滑动路径半径

        this.initCanvas(el);
        this.startDeg = 2 - startDeg;
        this.endDeg = 2 - endDeg;
        this.innerColor = innerColor;
        this.outColor = outColor;
        this.innerLineWidth = innerLineWidth;
        this.outLineWidth = outLineWidth;
        this.counterclockwise = counterclockwise;
        this.rotate = rotate;
        this.slider = slider;
        this.color = color;
        this.sliderColor = sliderColor;
        this.sliderBorderColor = sliderBorderColor;
        this.isDown = false;
        this.event(el);
      }
    }, {
      key: "initCanvas",
      value: function initCanvas(dom) {
        this.canvas = document.createElement("canvas");
        this.canvas.setAttribute("id", "dragArc");
        this.canvas.setAttribute("width", this.width);
        this.canvas.setAttribute("height", this.width);
        dom.appendChild(this.canvas);
        this.ctx = this.canvas.getContext("2d");
        console.log(this.ctx);
      } //绘图

    }, {
      key: "draw",
      value: function draw(value) {
        this.ctx.clearRect(0, 0, this.width, this.width); // j = j || 0.75 * Math.PI;

        this.ctx.save();
        this.rotate && this.ctx.translate(this.center, this.center);
        this.rotate && this.ctx.rotate(Math.PI * this.rotate);
        this.rotate && this.ctx.translate(-this.center, -this.center); // 绘制内层圆弧

        this.ctx.beginPath();
        this.ctx.lineWidth = 1;
        this.ctx.arc(this.center, this.center, this.radius - 20, Math.PI * this.startDeg, Math.PI * this.endDeg, this.counterclockwise); // 绘制内层圆弧

        this.ctx.strokeStyle = '#0078b4';
        this.ctx.stroke(); // 绘制外侧圆弧

        this.ctx.beginPath();
        this.ctx.arc(this.center, this.center, this.radius, Math.PI * this.startDeg, Math.PI * this.endDeg, this.counterclockwise); // 绘制外侧圆弧

        this.ctx.strokeStyle = '#c0c0c0';
        this.ctx.lineCap = "round";
        this.ctx.lineWidth = 20;
        this.ctx.stroke();
        var Deg = this.transDeg(value); //console.log(Deg)
        // 绘制可变圆弧

        this.ctx.beginPath();
        this.ctx.arc(this.center, this.center, this.radius, Math.PI * this.startDeg, Deg, this.counterclockwise); // 可变圆弧

        this.ctx.strokeStyle = '#f15a4a';
        this.ctx.lineCap = "round";
        this.ctx.lineWidth = 20;
        this.ctx.stroke(); // 绘制滑块

        this.P = this.DegXY(Deg);
        this.ctx.beginPath();
        this.ctx.moveTo(200, 200);
        this.ctx.arc(this.P.x, this.P.y, this.slider + 5, 0, Math.PI * 2, false); // 绘制滑块内侧

        this.ctx.fillStyle = this.sliderBorderColor;
        this.ctx.fill();
        this.ctx.beginPath();
        this.ctx.moveTo(200, 200);
        this.ctx.arc(this.P.x, this.P.y, this.slider, 0, Math.PI * 2, false); // 绘制滑块

        this.ctx.fillStyle = this.sliderColor;
        this.ctx.fill();
      }
    }, {
      key: "transDeg",
      value: function transDeg(v) {
        var range = this.startDeg - this.endDeg;
        var val = range / 100 * v;
        return (this.startDeg - val) * Math.PI;
      }
    }, {
      key: "DegXY",
      value: function DegXY(deg) {
        var d = 2 * Math.PI - deg;
        return this.respotchangeXY({
          x: this.radius * Math.cos(d),
          y: this.radius * Math.sin(d)
        });
      } //canvas坐标转化为中心坐标

    }, {
      key: "spotchangeXY",
      value: function spotchangeXY(point) {
        var _this = this;

        var spotchangeX = function spotchangeX(i) {
          return i - _this.center;
        };

        var spotchangeY = function spotchangeY(i) {
          return _this.center - i;
        };

        return {
          x: spotchangeX(point.x),
          y: spotchangeY(point.y)
        };
      } //中心坐标转化为canvas坐标

    }, {
      key: "respotchangeXY",
      value: function respotchangeXY(point) {
        var _this2 = this;

        var spotchangeX = function spotchangeX(i) {
          return i + _this2.center;
        };

        var spotchangeY = function spotchangeY(i) {
          return _this2.center - i;
        };

        return {
          x: spotchangeX(point.x),
          y: spotchangeY(point.y)
        };
      }
    }, {
      key: "event",
      value: function event(dom) {
        //事件绑定
        dom.addEventListener("mousedown", this.OnMouseDown.bind(this), false);
        dom.addEventListener("mousemove", this.debounce(this.OnMouseMove.bind(this)), false);
        dom.addEventListener("mouseup", this.OnMouseUp.bind(this), false);
      }
    }, {
      key: "OnMouseMove",
      value: function OnMouseMove(evt) {
        //
        if (!this.isDown) return;
        console.log('move');
        var evpoint = {};
        evpoint.x = this.getx(evt);
        evpoint.y = this.gety(evt);
        var point = this.spotchangeXY(evpoint);
        console.log(point);
        var deg = this.getDeg(point.x, point.y); //console.log(deg)

        this.draw(deg);
      }
    }, {
      key: "OnMouseDown",
      value: function OnMouseDown(evt) {
        console.log('down');
        var X = this.getx(evt);
        var Y = this.gety(evt);
        var minX = this.P.x - this.slider;
        var maxX = this.P.x + this.slider;
        var minY = this.P.y - this.slider;
        var maxY = this.P.y + this.slider;

        if (minX < X && X < maxX && minY < Y && Y < maxY) {
          //判断鼠标是否在滑块上 
          console.log("in slide");
          this.isDown = true;
        } else {
          this.isDown = false;
        }
      }
    }, {
      key: "OnMouseUp",
      value: function OnMouseUp() {
        //鼠标释放
        this.isDown = false;
      }
    }, {
      key: "getDeg",
      value: function getDeg(lx, ly) {
        console.log(lx, ly);
        console.log(ly / lx);
        var adeg = Math.atan(ly / lx);
        console.log(adeg);
        var deg;

        if (lx >= 0 && ly >= 0) {
          deg = adeg;
        }

        if (lx <= 0 && ly >= 0) {
          deg = adeg + Math.PI;
        }

        if (lx <= 0 && ly <= 0) {
          deg = adeg + Math.PI;
        }

        if (lx >= 0 && ly <= 0) {
          deg = adeg + Math.PI * 2;
        }

        return deg / ((this.startDeg - this.endDeg) * Math.PI) * 100;
      } //获取鼠标在canvas内坐标x

    }, {
      key: "getx",
      value: function getx(ev) {
        return ev.clientX - this.el.getBoundingClientRect().left;
      } //获取鼠标在canvas内坐标y

    }, {
      key: "gety",
      value: function gety(ev) {
        return ev.clientY - this.el.getBoundingClientRect().top;
      }
    }, {
      key: "debounce",
      value: function debounce(func) {
        var timeout;
        return function () {
          var context = this;
          var args = arguments;
          if (timeout) clearTimeout(timeout);
          timeout = setTimeout(function () {
            func.apply(context, args);
          }, 10);
        };
      }
    }]);

    return DragAcr;
  }();

  return DragAcr;

}());
